xquery version "3.0";

module namespace app="https://data.cobdh.org/app";

import module namespace templates="http://exist-db.org/xquery/templates";

import module namespace config="https://data.cobdh.org/config" at "config.xqm";

declare namespace test="http://exist-db.org/xquery/xqsuite";

declare namespace request="http://exist-db.org/xquery/request";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated).
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 :
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)){
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:href($node as node(), $model as map(*), $text as xs:string, $path as xs:string){
    (: TODO CONFIGURABLE LATER :)
    <a href="/exist/apps/cobdh-data{$path}">{$text}</a>
};

declare
    %test:arg("path", "bibl/1234")
    %test:assertEquals('/exist/apps/cobdh-data/bibl/1234')
function app:abspath($path as xs:string){
    let $result := concat("/exist/apps/cobdh-data/", $path)
    return
        $result
};

(:~ Determine resource based on passed url.
 : For example: https://data.cobdh.org/bibl/123 the resource is 123.
:)
declare function app:determine_resource($node as node(), $model as map(*)){
    let $parsed := app:parse_resource_url(request:get-uri())
    let $resource := $parsed[2]
    let $type := if (empty($parsed[3])) then 'html' else $parsed[3]
    let $content := ()
    return
        (: Store in `model` to use in further template procesing. :)
        map{
            "selected" : $resource,
            "content" : $content,
            "type" : $type
        }
};

declare
    (:Access TEI-Resource in bibl-Collection:)
    %test:arg("url", "exist/apps/cobdh-data/bibl/Hovhanessian2013.tei")
    %test:assertEquals('bibl', 'Hovhanessian2013', 'tei')

    (:No special resource format is defined:)
    %test:arg("url", "exist/apps/cobdh-data/persons/Helmutus")
    %test:assertEquals('persons', 'Helmutus')

    (:Allow simple index access:)
    %test:arg("url", "https://data.cobdh.org/persons/123")
    %test:assertEquals('persons', '123')

    (:Non-Data-Collection-page:)
    %test:arg("url", "exist/apps/cobdh-data/about")
    %test:assertEmpty

    (:Non-Unicode url:)
    %test:arg("url", "cobdh-data/persons/MaclerFr%C3%A9d%C3%A9ric")
    %test:assertEquals('persons', 'MaclerFrédéric')
function app:parse_resource_url($url) {
    let $url := xmldb:decode($url)
    let $parsed := analyze-string(
        $url,
        "/(bibl|persons|editors)/([\w\d_]+)(.(tei))?$"
    )
    let $collection := $parsed//fn:group[@nr=1]//text()
    let $resource := $parsed//fn:group[@nr=2]//text()
    let $type := $parsed//fn:group[@nr=4]//text()
    return
        ($collection, $resource, $type)
};

declare function app:get_parameter($node as node(), $model as map(*), $parameter as xs:string){
    request:get-parameter($parameter, '')
};
